// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  stateId   Int
  state     State    @relation(fields: [stateId], references: [id])
  User      User[]

  @@map("cities")
}

model State {
  id        Int      @id @default(autoincrement())
  name      String
  fu        String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  City      City[]

  @@map("states")
}

model User {
  id             Int      @id @default(autoincrement())
  name           String
  photo          String
  email          String   @unique
  password       String
  isDiscoverable Boolean  @default(true)
  followedBy     User[]   @relation("UserFollows", references: [id])
  following      User[]   @relation("UserFollows", references: [id])
  wallet         Wallet   @relation(fields: [walletId], references: [id])
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  city           City?    @relation(fields: [cityId], references: [id])

  walletId Int  @unique
  cityId   Int?

  @@map("users")
}

model Wallet {
  id   Int   @id @default(autoincrement())
  User User?

  Transaction Transaction[]

  @@map("wallets")
}

model Transaction {
  id                   Int                   @id @default(autoincrement())
  type                 TransactionTypes      @default(BUY)
  category             TransactionCategories @default(STOCKS)
  ticker               String
  rawTicker            String                @default("") @map("raw_ticker")
  financialInstitution String                @map("financial_institution")
  date                 DateTime
  quantity             Int
  price                Decimal               @db.Money
  totalAmount          Decimal               @default(0) @map("total_amount") @db.Money
  fee                  Decimal               @default(0) @db.Money
  walletId             Int
  wallet               Wallet                @relation(fields: [walletId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("transaction")
}

enum TransactionCategories {
  STOCKS
  IF
  TREASURE

  @@map("transaction_categories")
}

enum TransactionTypes {
  BUY
  SELL

  @@map("transaction_types")
}
